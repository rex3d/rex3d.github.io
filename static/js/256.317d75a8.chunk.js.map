{"version":3,"file":"static/js/256.317d75a8.chunk.js","mappings":"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","sources":["components/FinanceDashboard.js","pages/AdminDashboardPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { supabase } from '../supabase'; // Assuming supabase is accessible\nimport { Bar, Doughnut, Line } from 'react-chartjs-2';\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, ArcElement, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register Chart.js components (ensure all needed are registered)\nChartJS.register(CategoryScale, LinearScale, BarElement, ArcElement, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst FinanceDashboard = ({ user }) => { // Receive user as prop\n    // --- State for Finances View ---\n    const [transactions, setTransactions] = useState([]);\n    const [newTransaction, setNewTransaction] = useState({ type: 'expense', description: '', amount: '', category: '' });\n    const [financialStats, setFinancialStats] = useState({ totalIncome: 0, totalExpenses: 0, netProfit: 0 });\n    const [financialGoal, setFinancialGoal] = useState(10000);\n\n    // --- State for Budgets View ---\n    const [budgets, setBudgets] = useState([]);\n    const [newBudget, setNewBudget] = useState({ category: '', limit: '' });\n\n    // --- State for Scheduled Transactions View ---\n    const [scheduledTransactions, setScheduledTransactions] = useState([]);\n    const [newScheduledTransaction, setNewScheduledTransaction] = useState({ type: 'expense', description: '', amount: '', category: '', frequency: 'monthly', nextDueDate: '' });\n\n    // --- Loading States ---\n    const [isTransactionsLoading, setIsTransactionsLoading] = useState(false);\n    const [dateRange, setDateRange] = useState({ startDate: '', endDate: '' });\n    const [selectedCategory, setSelectedCategory] = useState('all');\n    const [editingTransaction, setEditingTransaction] = useState(null);\n\n    const uniqueTransactionCategories = useMemo(() => {\n        const allCategories = transactions.map(t => t.category).filter(Boolean);\n        return ['all', ...Array.from(new Set(allCategories))];\n    }, [transactions]);\n\n    // --- Fetch Finances Logic ---\n    const fetchTransactions = useCallback(async () => {\n        setIsTransactionsLoading(true);\n        let query = supabase.from('transactions').select('*');\n\n        if (dateRange.startDate) {\n            query = query.gte('created_at', dateRange.startDate);\n        }\n        if (dateRange.endDate) {\n            query = query.lte('created_at', dateRange.endDate);\n        }\n        if (selectedCategory !== 'all') {\n            query = query.eq('category', selectedCategory);\n        }\n\n        const { data, error } = await query.order('created_at', { ascending: false });\n\n        if (error) {\n            console.error('Error fetching transactions:', error);\n        } else {\n            setTransactions(data);\n        }\n        setIsTransactionsLoading(false);\n    }, [dateRange, selectedCategory]);\n\n    const fetchBudgets = useCallback(async () => {\n        if (!user) return; // Ensure user is available\n        const { data, error } = await supabase\n            .from('budgets')\n            .select('*')\n            .eq('user_id', user.id);\n\n        if (error) {\n            console.error('Error fetching budgets:', error);\n        } else {\n            setBudgets(data);\n        }\n    }, [user]);\n\n    const fetchScheduledTransactions = useCallback(async () => {\n        if (!user) return; // Ensure user is available\n        const { data, error } = await supabase\n            .from('scheduled_transactions')\n            .select('*')\n            .eq('user_id', user.id);\n\n        if (error) {\n            console.error('Error fetching scheduled transactions:', error);\n        } else {\n            setScheduledTransactions(data);\n        }\n    }, [user]);\n\n    const calculateFinancialStats = useCallback(() => {\n        const totalIncome = transactions\n            .filter(t => t.type === 'income')\n            .reduce((sum, t) => sum + t.amount, 0);\n\n        const totalExpenses = transactions\n            .filter(t => t.type === 'expense')\n            .reduce((sum, t) => sum + t.amount, 0);\n\n        const netProfit = totalIncome - totalExpenses;\n\n        setFinancialStats({\n            totalIncome,\n            totalExpenses,\n            netProfit,\n        });\n    }, [transactions]);\n\n    const handleTransactionSubmit = async (e) => {\n        e.preventDefault();\n        const { type, description, amount, category } = newTransaction;\n\n        if (!description || !amount) {\n            alert('Opis i kwota są wymagane.');\n            return;\n        }\n\n        const { error } = await supabase.from('transactions').insert([\n            {\n                type,\n                description,\n                amount: parseFloat(amount),\n                category,\n            },\n        ]);\n\n        if (error) {\n            console.error('Error inserting transaction:', error);\n            alert('Nie udało się dodać transakcji.');\n        } else {\n            setNewTransaction({ type: 'expense', description: '', amount: '', category: '' });\n            fetchTransactions();\n        }\n    };\n\n    const handleDeleteTransaction = async (transactionId) => {\n        if (window.confirm('Czy na pewno chcesz usunąć tę transakcję?')) {\n            const { error } = await supabase\n                .from('transactions')\n                .delete()\n                .eq('id', transactionId);\n\n            if (error) {\n                console.error('Error deleting transaction:', error);\n                alert('Nie udało się usunąć transakcji.');\n            } else {\n                fetchTransactions();\n            }\n        }\n    };\n\n    const handleUpdateTransaction = async (e) => {\n        e.preventDefault();\n        const { id, type, description, amount, category } = editingTransaction;\n\n        if (!description || !amount) {\n            alert('Opis i kwota są wymagane.');\n            return;\n        }\n\n        const { error } = await supabase\n            .from('transactions')\n            .update({ type, description, amount: parseFloat(amount), category })\n            .eq('id', id);\n\n        if (error) {\n            console.error('Error updating transaction:', error);\n            alert('Nie udało się zaktualizować transakcji.');\n        } else {\n            setEditingTransaction(null);\n            fetchTransactions();\n        }\n    };\n\n    const handleAddBudget = async (e) => {\n        e.preventDefault();\n        if (!newBudget.category || !newBudget.limit) {\n            alert('Kategoria i limit są wymagane.');\n            return;\n        }\n        const { data, error } = await supabase\n            .from('budgets')\n            .insert(\n                {\n                    user_id: user.id, // Link to current user\n                    category: newBudget.category,\n                    limit: parseFloat(newBudget.limit),\n                },\n            );\n\n        if (error) {\n            console.error('Error adding budget:', error);\n            alert('Nie udało się dodać budżetu.');\n        } else {\n            setNewBudget({ category: '', limit: '' });\n            fetchBudgets(); // Refresh budgets from Supabase\n        }\n    };\n\n    const handleDeleteBudget = async (budgetId) => {\n        if (window.confirm('Czy na pewno chcesz usunąć ten budżet?')) {\n            const { error } = await supabase\n                .from('budgets')\n                .delete()\n                .eq('id', budgetId);\n\n            if (error) {\n                console.error('Error deleting budget:', error);\n                alert('Nie udało się usunąć budżetu.');\n            } else {\n                fetchBudgets(); // Refresh budgets from Supabase\n            }\n        }\n    };\n\n    const handleAddScheduledTransaction = async (e) => {\n        e.preventDefault();\n        if (!newScheduledTransaction.description || !newScheduledTransaction.amount || !newScheduledTransaction.nextDueDate) {\n            alert('Opis, kwota i następna data są wymagane.');\n            return;\n        }\n        const { data, error } = await supabase\n            .from('scheduled_transactions')\n            .insert(\n                {\n                    user_id: user.id, // Link to current user\n                    type: newScheduledTransaction.type,\n                    description: newScheduledTransaction.description,\n                    amount: parseFloat(newScheduledTransaction.amount),\n                    category: newScheduledTransaction.category,\n                    frequency: newScheduledTransaction.frequency,\n                    next_due_date: newScheduledTransaction.nextDueDate, // Supabase column name\n                },\n            );\n\n        if (error) {\n            console.error('Error adding scheduled transaction:', error);\n            alert('Nie udało się dodać zaplanowanej transakcji.');\n        } else {\n            setNewScheduledTransaction({ type: 'expense', description: '', amount: '', category: '', frequency: 'monthly', nextDueDate: '' });\n            fetchScheduledTransactions(); // Refresh scheduled transactions from Supabase\n        }\n    };\n\n    const handleDeleteScheduledTransaction = async (scheduledTransactionId) => {\n        if (window.confirm('Czy na pewno chcesz usunąć tę zaplanowaną transakcję?')) {\n            const { error } = await supabase\n                .from('scheduled_transactions')\n                .delete()\n                .eq('id', scheduledTransactionId);\n\n            if (error) {\n                console.error('Error deleting scheduled transaction:', error);\n                alert('Nie udało się usunąć zaplanowanej transakcji.');\n            } else {\n                fetchScheduledTransactions(); // Refresh scheduled transactions from Supabase\n            }\n        }\n    };\n\n    // Effects\n    useEffect(() => {\n        if (user) { // Fetch data only if user is logged in\n            fetchTransactions();\n            fetchBudgets();\n            fetchScheduledTransactions();\n        }\n    }, [user, fetchTransactions, fetchBudgets, fetchScheduledTransactions]);\n\n    useEffect(() => {\n        if (transactions.length > 0) {\n            calculateFinancialStats();\n        }\n    }, [transactions, calculateFinancialStats]);\n\n    return (\n        <>\n            <div className=\"d-flex justify-content-end mb-3\">\n                <button className=\"btn btn-outline-primary\" onClick={fetchTransactions}>Odśwież</button>\n            </div>\n            <FinancialStats stats={financialStats} />\n            <FinancialGoalTracker goal={financialGoal} current={financialStats.netProfit} />\n            <FinancialCharts transactions={transactions} />\n            <div className=\"row mb-4\">\n                <div className=\"col-md-3\">\n                    <label htmlFor=\"startDate\" className=\"form-label\">Data od</label>\n                    <input \n                        type=\"date\" \n                        className=\"form-control\"\n                        id=\"startDate\"\n                        value={dateRange.startDate}\n                        onChange={(e) => setDateRange({ ...dateRange, startDate: e.target.value })}\n                    />\n                </div>\n                <div className=\"col-md-3\">\n                    <label htmlFor=\"endDate\" className=\"form-label\">Data do</label>\n                    <input \n                        type=\"date\" \n                        className=\"form-control\"\n                        id=\"endDate\"\n                        value={dateRange.endDate}\n                        onChange={(e) => setDateRange({ ...dateRange, endDate: e.target.value })}\n                    />\n                </div>\n                <div className=\"col-md-3\">\n                    <label htmlFor=\"categoryFilter\" className=\"form-label\">Kategoria</label>\n                    <select \n                        className=\"form-select\"\n                        id=\"categoryFilter\"\n                        value={selectedCategory}\n                        onChange={(e) => setSelectedCategory(e.target.value)}\n                    >\n                        {uniqueTransactionCategories.map(cat => <option key={cat} value={cat}>{cat === 'all' ? 'Wszystkie' : cat}</option>)}\n                    </select>\n                </div>\n            </div>\n            <h5>Dodaj nową transakcję</h5>\n            <form onSubmit={handleTransactionSubmit} className=\"row g-3 mb-4\">\n                <div className=\"col-md-2\">\n                    <select \n                        className=\"form-select\"\n                        value={newTransaction.type}\n                        onChange={(e) => setNewTransaction({ ...newTransaction, type: e.target.value })}\n                    >\n                        <option value=\"expense\">Wydatek</option>\n                        <option value=\"income\">Dochód</option>\n                    </select>\n                </div>\n                <div className=\"col-md-4\">\n                    <input \n                        type=\"text\" \n                        className=\"form-control\" \n                        placeholder=\"Opis\"\n                        value={newTransaction.description}\n                        onChange={(e) => setNewTransaction({ ...newTransaction, description: e.target.value })}\n                    />\n                </div>\n                <div className=\"col-md-2\">\n                    <input \n                        type=\"number\" \n                        className=\"form-control\" \n                        placeholder=\"Kwota\"\n                        value={newTransaction.amount}\n                        onChange={(e) => setNewTransaction({ ...newTransaction, amount: e.target.value })}\n                    />\n                </div>\n                <div className=\"col-md-2\">\n                    <input \n                        type=\"text\" \n                        className=\"form-control\" \n                        placeholder=\"Kategoria\"\n                        value={newTransaction.category}\n                        onChange={(e) => setNewTransaction({ ...newTransaction, category: e.target.value })}\n                    />\n                </div>\n                <div className=\"col-md-2\">\n                    <button type=\"submit\" className=\"btn btn-primary w-100\">Dodaj</button>\n                </div>\n            </form>\n\n            <h5>Historia transakcji</h5>\n            <div className=\"table-responsive\">\n                <table className=\"table table-striped table-hover\">\n                    <thead>\n                        <tr>\n                            <th>Data</th>\n                            <th>Typ</th>\n                            <th>Opis</th>\n                            <th>Kwota</th>\n                            <th>Kategoria</th>\n                            <th>Akcje</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {transactions.map(transaction => (\n                            <tr key={transaction.id}>\n                                <td>{new Date(transaction.created_at).toLocaleString()}</td>\n                                <td>{transaction.type}</td>\n                                <td>{transaction.description}</td>\n                                <td>{transaction.amount.toFixed(2)} zł</td>\n                                <td>{transaction.category}</td>\n                                <td>\n                                    <button \n                                        className=\"btn btn-primary btn-sm me-2\"\n                                        onClick={() => setEditingTransaction(transaction)}\n                                    >\n                                        Edytuj\n                                    </button>\n                                    <button \n                                        className=\"btn btn-danger btn-sm\"\n                                        onClick={() => handleDeleteTransaction(transaction.id)}\n                                    >\n                                        Usuń\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n            {editingTransaction && (\n                <>\n                    <div className=\"modal fade show\" style={{ display: 'block' }} tabIndex=\"-1\">\n                        <div className=\"modal-dialog\">\n                            <div className=\"modal-content\">\n                                <form onSubmit={handleUpdateTransaction}>\n                                    <div className=\"modal-header\">\n                                        <h5 className=\"modal-title\">Edytuj Transakcję</h5>\n                                        <button type=\"button\" className=\"btn-close\" onClick={() => setEditingTransaction(null)}></button>\n                                    </div>\n                                    <div className=\"modal-body\">\n                                        <div className=\"mb-3\">\n                                            <label className=\"form-label\">Typ</label>\n                                            <select\n                                                className=\"form-select\"\n                                                value={editingTransaction.type}\n                                                onChange={(e) => setEditingTransaction({ ...editingTransaction, type: e.target.value })}\n                                            >\n                                                <option value=\"expense\">Wydatek</option>\n                                                <option value=\"income\">Dochód</option>\n                                            </select>\n                                        </div>\n                                        <div className=\"mb-3\">\n                                            <label className=\"form-label\">Opis</label>\n                                            <input\n                                                type=\"text\"\n                                                className=\"form-control\"\n                                                value={editingTransaction.description}\n                                                onChange={(e) => setEditingTransaction({ ...editingTransaction, description: e.target.value })}\n                                            />\n                                        </div>\n                                        <div className=\"mb-3\">\n                                            <label className=\"form-label\">Kwota</label>\n                                            <input\n                                                type=\"number\" \n                                                className=\"form-control\"\n                                                value={editingTransaction.amount}\n                                                onChange={(e) => setEditingTransaction({ ...editingTransaction, amount: e.target.value })}\n                                            />\n                                        </div>\n                                        <div className=\"mb-3\">\n                                            <label className=\"form-label\">Kategoria</label>\n                                            <input\n                                                type=\"text\"\n                                                className=\"form-control\"\n                                                value={editingTransaction.category || ''}\n                                                onChange={(e) => setEditingTransaction({ ...editingTransaction, category: e.target.value })}\n                                            />\n                                        </div>\n                                    </div>\n                                    <div className=\"modal-footer\">\n                                        <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setEditingTransaction(null)}>Anuluj</button>\n                                        <button type=\"submit\" className=\"btn btn-primary\">Zapisz zmiany</button>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"modal-backdrop fade show\" onClick={() => setEditingTransaction(null)}></div>\n                </>\n            )}\n\n            <h5 className=\"mt-5\">Zarządzanie Budżetami</h5>\n            <form onSubmit={handleAddBudget} className=\"row g-3 mb-4\">\n                <div className=\"col-md-4\">\n                    <input \n                        type=\"text\" \n                        className=\"form-control\" \n                        placeholder=\"Kategoria budżetu\"\n                        value={newBudget.category}\n                        onChange={(e) => setNewBudget({ ...newBudget, category: e.target.value })}\n                        required\n                    />\n                </div>\n                <div className=\"col-md-4\">\n                    <input \n                        type=\"number\" \n                        className=\"form-control\" \n                        placeholder=\"Limit kwoty\"\n                        value={newBudget.limit}\n                        onChange={(e) => setNewBudget({ ...newBudget, limit: e.target.value })}\n                        required\n                    />\n                </div>\n                <div className=\"col-md-4\">\n                    <button type=\"submit\" className=\"btn btn-success w-100\">Dodaj Budżet</button>\n                </div>\n            </form>\n\n            <div className=\"table-responsive\">\n                <table className=\"table table-striped table-hover\">\n                    <thead>\n                        <tr>\n                            <th>Kategoria</th>\n                            <th>Limit</th>\n                            <th>Wydano</th>\n                            <th>Pozostało</th>\n                            <th>Procent</th>\n                            <th>Akcje</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {budgets.map((budget, index) => {\n                            const spent = transactions\n                                .filter(t => t.type === 'expense' && t.category === budget.category)\n                                .reduce((sum, t) => sum + t.amount, 0);\n                            const remaining = budget.limit - spent;\n                            const percentage = (spent / budget.limit) * 100;\n                            return (\n                                <tr key={index}>\n                                    <td>{budget.category}</td>\n                                    <td>{budget.limit.toFixed(2)} zł</td>\n                                    <td>{spent.toFixed(2)} zł</td>\n                                    <td className={remaining < 0 ? 'text-danger' : ''}>{remaining.toFixed(2)} zł</td>\n                                    <td>\n                                        <div className=\"progress\">\n                                            <div \n                                                className={`progress-bar ${percentage > 100 ? 'bg-danger' : 'bg-info'}`} \n                                                role=\"progressbar\" \n                                                style={{ width: `${Math.min(percentage, 100)}%` }} \n                                                aria-valuenow={percentage} \n                                                aria-valuemin=\"0\" \n                                                aria-valuemax=\"100\"\n                                            >\n                                                {percentage.toFixed(1)}%\n                                            </div>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <button \n                                            className=\"btn btn-danger btn-sm\"\n                                            onClick={() => handleDeleteBudget(budget.id)}\n                                        >\n                                            Usuń\n                                        </button>\n                                    </td>\n                                </tr>\n                            );\n                        })}\n                    </tbody>\n                </table>\n            </div>\n\n            <h5 className=\"mt-5\">Zaplanowane Transakcje</h5>\n            <form onSubmit={handleAddScheduledTransaction} className=\"row g-3 mb-4\">\n                <div className=\"col-md-2\">\n                    <select \n                        className=\"form-select\"\n                        value={newScheduledTransaction.type}\n                        onChange={(e) => setNewScheduledTransaction({ ...newScheduledTransaction, type: e.target.value })}\n                    >\n                        <option value=\"expense\">Wydatek</option>\n                        <option value=\"income\">Dochód</option>\n                    </select>\n                </div>\n                <div className=\"col-md-3\">\n                    <input \n                        type=\"text\" \n                        className=\"form-control\" \n                        placeholder=\"Opis\"\n                        value={newScheduledTransaction.description}\n                        onChange={(e) => setNewScheduledTransaction({ ...newScheduledTransaction, description: e.target.value })}\n                        required\n                    />\n                </div>\n                <div className=\"col-md-2\">\n                    <input \n                        type=\"number\" \n                        className=\"form-control\" \n                        placeholder=\"Kwota\"\n                        value={newScheduledTransaction.amount}\n                        onChange={(e) => setNewScheduledTransaction({ ...newScheduledTransaction, amount: e.target.value })}\n                        required\n                    />\n                </div>\n                <div className=\"col-md-2\">\n                    <input \n                        type=\"text\" \n                        className=\"form-control\" \n                        placeholder=\"Kategoria\"\n                        value={newScheduledTransaction.category}\n                        onChange={(e) => setNewScheduledTransaction({ ...newScheduledTransaction, category: e.target.value })}\n                    />\n                </div>\n                <div className=\"col-md-2\">\n                    <select \n                        className=\"form-select\"\n                        value={newScheduledTransaction.frequency}\n                        onChange={(e) => setNewScheduledTransaction({ ...newScheduledTransaction, frequency: e.target.value })}\n                    >\n                        <option value=\"monthly\">Miesięcznie</option>\n                        <option value=\"weekly\">Tygodniowo</option>\n                        <option value=\"quarterly\">Kwartalnie</option>\n                        <option value=\"yearly\">Rocznie</option>\n                    </select>\n                </div>\n                <div className=\"col-md-1\">\n                    <input \n                        type=\"date\" \n                        className=\"form-control\" \n                        value={newScheduledTransaction.nextDueDate}\n                        onChange={(e) => setNewScheduledTransaction({ ...newScheduledTransaction, nextDueDate: e.target.value })}\n                        required\n                    />\n                </div>\n                <div className=\"col-md-12\">\n                    <button type=\"submit\" className=\"btn btn-primary w-100\">Dodaj Zaplanowaną Transakcję</button>\n                </div>\n            </form>\n\n            <div className=\"table-responsive\">\n                <table className=\"table table-striped table-hover\">\n                    <thead>\n                        <tr>\n                            <th>Typ</th>\n                            <th>Opis</th>\n                            <th>Kwota</th>\n                            <th>Kategoria</th>\n                            <th>Częstotliwość</th>\n                            <th>Następna Data</th>\n                            <th>Akcje</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {scheduledTransactions.map((st, index) => (\n                            <tr key={index}>\n                                <td>{st.type}</td>\n                                <td>{st.description}</td>\n                                <td>{st.amount.toFixed(2)} zł</td>\n                                <td>{st.category}</td>\n                                <td>{st.frequency}</td>\n                                <td>{st.nextDueDate}</td>\n                                <td>\n                                    <button \n                                        className=\"btn btn-danger btn-sm\"\n                                        onClick={() => handleDeleteScheduledTransaction(st.id)}\n                                    >\n                                        Usuń\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n\n            <h5 className=\"mt-5\">Top 5 Wydatków wg Kategorii</h5>\n            <div className=\"table-responsive mb-4\">\n                <table className=\"table table-striped table-hover\">\n                    <thead>\n                        <tr>\n                            <th>Kategoria</th>\n                            <th>Kwota</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {Object.entries(transactions\n                            .filter(t => t.type === 'expense')\n                            .reduce((acc, t) => {\n                                acc[t.category] = (acc[t.category] || 0) + t.amount;\n                                return acc;\n                            }, {}))\n                            .sort(([, a], [, b]) => b - a)\n                            .slice(0, 5)\n                            .map(([category, amount]) => (\n                                <tr key={category}>\n                                    <td>{category}</td>\n                                    <td>{amount.toFixed(2)} zł</td>\n                                </tr>\n                            ))}\n                    </tbody>\n                </table>\n            </div>\n\n            <h5 className=\"mt-5\">Dochody wg Kategorii</h5>\n            <div className=\"table-responsive mb-4\">\n                <table className=\"table table-striped table-hover\">\n                    <thead>\n                        <tr>\n                            <th>Kategoria</th>\n                            <th>Kwota</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {Object.entries(transactions\n                            .filter(t => t.type === 'income')\n                            .reduce((acc, t) => {\n                                acc[t.category] = (acc[t.category] || 0) + t.amount;\n                                return acc;\n                            }, {}))\n                            .sort(([, a], [, b]) => b - a)\n                            .map(([category, amount]) => (\n                                <tr key={category}>\n                                    <td>{category}</td>\n                                    <td>{amount.toFixed(2)} zł</td>\n                                </tr>\n                            ))}\n                    </tbody>\n                </table>\n            </div>\n        </>\n    );\n};\n\nconst FinancialStats = ({ stats }) => (\n    <div className=\"row mb-4\">\n        <div className=\"col-md-4\">\n            <div className=\"card admin-card text-white bg-success mb-3\">\n                <div className=\"card-header\">Całkowity dochód</div>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{stats.totalIncome.toFixed(2)} zł</h5>\n                </div>\n            </div>\n        </div>\n        <div className=\"col-md-4\">\n            <div className=\"card admin-card text-white bg-danger mb-3\">\n                <div className=\"card-header\">Całkowite wydatki</div>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{stats.totalExpenses.toFixed(2)} zł</h5>\n                </div>\n            </div>\n        </div>\n        <div className=\"col-md-4\">\n            <div className=\"card admin-card text-white bg-info mb-3\">\n                <div className=\"card-header\">Zysk</div>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{stats.netProfit.toFixed(2)} zł</h5>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nconst FinancialGoalTracker = ({ goal, current }) => {\n    const percentage = Math.round((current / goal) * 100);\n\n    return (\n        <div className=\"card admin-card goal-tracker\">\n            <div className=\"card-body\">\n                <h5 className=\"card-title\">Cel finansowy</h5>\n                <div className=\"goal-progress\">\n                    <CircularProgressbar \n                        value={percentage} \n                        text={`${percentage}%`}\n                        styles={buildStyles({\n                            textColor: '#333',\n                            pathColor: `rgba(75, 192, 192, ${percentage / 100})`,\n                            trailColor: '#d6d6d6',\n                        })}\n                    />\n                </div>\n                <p>Zrealizowano: {current.toFixed(2)} zł z {goal.toFixed(2)} zł</p>\n            </div>\n        </div>\n    );\n};\n\nconst FinancialCharts = ({ transactions }) => {\n    const expenseByCategory = transactions\n        .filter(t => t.type === 'expense')\n        .reduce((acc, t) => {\n            acc[t.category] = (acc[t.category] || 0) + t.amount;\n            return acc;\n        }, {});\n\n    const expensePieChartData = {\n        labels: Object.keys(expenseByCategory),\n        datasets: [\n            {\n                data: Object.values(expenseByCategory),\n                backgroundColor: [\n                    '#FF6384',\n                    '#36A2EB',\n                    '#FFCE56',\n                    '#4BC0C0',\n                    '#9966FF',\n                    '#FF9F40',\n                ],\n            },\n        ],\n    };\n\n    const transactionsByMonth = transactions.reduce((acc, t) => {\n        const month = new Date(t.created_at).toLocaleString('default', { month: 'long', year: 'numeric' });\n        if (!acc[month]) {\n            acc[month] = { income: 0, expense: 0 };\n        }\n        acc[month][t.type] += t.amount;\n        return acc;\n    }, {});\n\n    const lineChartData = {\n        labels: Object.keys(transactionsByMonth),\n        datasets: [\n            {\n                label: 'Dochód',\n                data: Object.values(transactionsByMonth).map(m => m.income),\n                borderColor: 'rgba(75, 192, 192, 1)',\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            },\n            {\n                label: 'Wydatki',\n                data: Object.values(transactionsByMonth).map(m => m.expense),\n                borderColor: 'rgba(255, 99, 132, 1)',\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            },\n            {\n                label: 'Netto',\n                data: Object.values(transactionsByMonth).map(m => m.income - m.expense),\n                borderColor: 'rgba(54, 162, 235, 1)',\n                backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                fill: false, // Net cash flow usually doesn't have a filled area\n            },\n        ],\n    };\n\n    return (\n        <div className=\"row mt-4\">\n            <div className=\"col-md-6\">\n                <div className=\"card admin-card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Wydatki wg kategorii</h5>\n                        <Doughnut data={expensePieChartData} />\n                    </div>\n                </div>\n            </div>\n            <div className=\"col-md-6\">\n                <div className=\"card admin-card\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">Dochody i wydatki w czasie</h5>\n                        <Line data={lineChartData} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FinanceDashboard;","// src/pages/AdminDashboardPage.js\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { supabase } from '../supabase';\nimport { useNavigate } from 'react-router-dom';\n\nimport { Bar } from 'react-chartjs-2';\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  ArcElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nimport FinanceDashboard from '../components/FinanceDashboard';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, ArcElement, PointElement, LineElement, Title, Tooltip, Legend);\n\n// --- Helper Functions (safer) ---\nconst getPriceValue = (priceString) => {\n    if (priceString === null || priceString === undefined) return 0;\n    const price = parseFloat(String(priceString).replace(',', '.').replace(' zł', ''));\n    return isNaN(price) ? 0 : price;\n};\n\nconst hasPromotion = (product) => {\n    if (!product || !product.heightOptions) return false;\n    return product.heightOptions.some(opt => Boolean(opt && (opt.promoPrice || opt.promo_price)));\n};\n\n// Simple resolveAsset in case you need images here later\nconst resolveAsset = (path) => {\n    if (!path) return '';\n    if (path.startsWith('http') || path.startsWith('data:')) return path;\n    const prefix = process.env.PUBLIC_URL || '';\n    if (path.startsWith('/')) return `${prefix}${path}`;\n    return `${prefix}/${path}`;\n};\n\n// --- Small dashboard components ---\nconst DashboardCharts = ({ orders }) => {\n    const orderStatusCounts = orders.reduce((acc, order) => {\n        acc[order.status] = (acc[order.status] || 0) + 1;\n        return acc;\n    }, {});\n\n    const chartData = {\n        labels: Object.keys(orderStatusCounts),\n        datasets: [\n            {\n                label: 'Liczba zamówień wg statusu',\n                data: Object.values(orderStatusCounts),\n                backgroundColor: 'rgba(75, 192, 192, 0.6)',\n            },\n        ],\n    };\n\n    const chartOptions = {\n        responsive: true,\n        plugins: {\n            legend: {\n                position: 'top',\n            },\n            title: {\n                display: true,\n                text: 'Zamówienia wg statusu',\n            },\n        },\n    };\n\n    return (\n        <div className=\"card mt-4\">\n            <div className=\"card-body\">\n                <Bar data={chartData} options={chartOptions} />\n            </div>\n        </div>\n    );\n};\n\nconst DashboardStats = ({ stats }) => (\n    <div className=\"row mb-4\">\n        <div className=\"col-md-3\">\n            <div className=\"card text-white bg-primary mb-3\">\n                <div className=\"card-header\">Wszystkie zamówienia</div>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{stats.totalOrders}</h5>\n                </div>\n            </div>\n        </div>\n        <div className=\"col-md-3\">\n            <div className=\"card text-white bg-warning mb-3\">\n                <div className=\"card-header\">Nowe zamówienia</div>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{stats.newOrders}</h5>\n                </div>\n            </div>\n        </div>\n        <div className=\"col-md-3\">\n            <div className=\"card text-white bg-success mb-3\">\n                <div className=\"card-header\">Zakończone zamówienia</div>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{stats.completedOrders}</h5>\n                </div>\n            </div>\n        </div>\n        <div className=\"col-md-3\">\n            <div className=\"card text-white bg-info mb-3\">\n                <div className=\"card-header\">Całkowity przychód</div>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{(stats.totalRevenue || 0).toFixed(2)} zł</h5>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nconst AdminDashboardPage = () => {\n    const { user, isAdmin, loading, signOut } = useAuth();\n    const navigate = useNavigate();\n\n    // Products\n    const [products, setProducts] = useState([]);\n    const [productsLoading, setProductsLoading] = useState(true);\n    const [productsError, setProductsError] = useState(null);\n\n    // Fetch products.json from public folder (uses PUBLIC_URL so GH Pages doesn't 404)\n    const fetchProducts = useCallback(async () => {\n        setProductsLoading(true);\n        setProductsError(null);\n        try {\n            const url = `${process.env.PUBLIC_URL || ''}/products.json`;\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = await response.json();\n            setProducts(Array.isArray(data) ? data : []);\n        } catch (error) {\n            console.error(\"Error fetching products.json:\", error);\n            setProducts([]);\n            setProductsError(error);\n        } finally {\n            setProductsLoading(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        fetchProducts();\n    }, [fetchProducts]);\n\n    // --- Orders / dashboard / finances state and logic ---\n    const [orders, setOrders] = useState([]);\n    const [orderFetchStatus, setOrderFetchStatus] = useState('loading');\n    const [orderSearchTerm, setOrderSearchTerm] = useState('');\n    const [orderFilterStatus, setOrderFilterStatus] = useState('all');\n    const [orderCurrentPage, setOrderCurrentPage] = useState(1);\n    const [orderTotalPages, setOrderTotalPages] = useState(1);\n    const orderItemsPerPage = 10;\n    const orderStatuses = ['all', 'nowe', 'wycena w toku', 'oczekiwanie na akceptację', 'zaakceptowane', 'odrzucone', 'w realizacji', 'wstrzymane', 'gotowe do odbioru', 'zakończone', 'anulowane'];\n    const [selectedOrder, setSelectedOrder] = useState(null);\n    const [modalQuotePrice, setModalQuotePrice] = useState('');\n    const [modalAdminComment, setModalAdminComment] = useState('');\n    const [modalComments, setModalComments] = useState([]);\n    const [newAdminComment, setNewAdminComment] = useState('');\n    const [allOrders, setAllOrders] = useState([]);\n    const [dashboardStats, setDashboardStats] = useState({\n        totalOrders: 0,\n        newOrders: 0,\n        completedOrders: 0,\n        totalRevenue: 0,\n    });\n\n    // Products view state\n    const [productSearchTerm, setProductSearchTerm] = useState('');\n    const [productFilterCategory, setProductFilterCategory] = useState('all');\n    const [productFilterColor, setProductFilterColor] = useState('all');\n    const [productFilterPromo, setProductFilterPromo] = useState(false);\n    const [productFilterNew, setProductFilterNew] = useState(false);\n    const [productFilterBestseller, setProductFilterBestseller] = useState(false);\n    const [productSortOrder, setProductSortOrder] = useState('default');\n\n    // Loading states\n    const [isOrdersLoading, setIsOrdersLoading] = useState(false);\n    const [isAllOrdersLoading, setIsAllOrdersLoading] = useState(false);\n    const [isTransactionsLoading, setIsTransactionsLoading] = useState(false);\n    const [dateRange, setDateRange] = useState({ startDate: '', endDate: '' });\n    const [selectedCategory, setSelectedCategory] = useState('all');\n    const [editingTransaction, setEditingTransaction] = useState(null);\n\n    // Finances state\n    const [transactions, setTransactions] = useState([]);\n    const [newTransaction, setNewTransaction] = useState({ type: 'expense', description: '', amount: '', category: '' });\n    const [financialStats, setFinancialStats] = useState({ totalIncome: 0, totalExpenses: 0, netProfit: 0 });\n    const [financialGoal, setFinancialGoal] = useState(10000);\n\n    // Budgets / scheduled transactions state\n    const [budgets, setBudgets] = useState([]);\n    const [newBudget, setNewBudget] = useState({ category: '', limit: '' });\n    const [scheduledTransactions, setScheduledTransactions] = useState([]);\n    const [newScheduledTransaction, setNewScheduledTransaction] = useState({ type: 'expense', description: '', amount: '', category: '', frequency: 'monthly', nextDueDate: '' });\n\n    const uniqueTransactionCategories = useMemo(() => {\n        const allCategories = transactions.map(t => t.category).filter(Boolean);\n        return ['all', ...Array.from(new Set(allCategories))];\n    }, [transactions]);\n\n    const [currentView, setCurrentView] = useState('orders');\n\n    // --- Orders fetching logic ---\n    const fetchOrders = useCallback(async () => {\n        setIsOrdersLoading(true);\n        setOrderFetchStatus('loading');\n        try {\n            let query = supabase.from('custom_orders').select('*', { count: 'exact' });\n\n            if (orderSearchTerm) {\n                // supabase or() string must be precise - protect special chars\n                const q = orderSearchTerm.replace(/%/g, '\\\\%').replace(/'/g, \"''\");\n                query = query.or(`order_id.ilike.%${q}%,customer_name.ilike.%${q}%,customer_email.ilike.%${q}%`);\n            }\n            if (orderFilterStatus !== 'all') {\n                query = query.eq('status', orderFilterStatus);\n            }\n\n            const from = (orderCurrentPage - 1) * orderItemsPerPage;\n            const to = from + orderItemsPerPage - 1;\n            query = query.order('created_at', { ascending: false }).range(from, to);\n\n            const { data, error, count } = await query;\n\n            if (error) {\n                console.error('Error fetching orders:', error);\n                setOrderFetchStatus('error');\n            } else {\n                setOrders(data || []);\n                setOrderTotalPages(count ? Math.ceil(count / orderItemsPerPage) : 1);\n                setOrderFetchStatus('success');\n            }\n        } catch (e) {\n            console.error('Error in fetchOrders:', e);\n            setOrderFetchStatus('error');\n        } finally {\n            setIsOrdersLoading(false);\n        }\n    }, [orderSearchTerm, orderFilterStatus, orderCurrentPage, orderItemsPerPage]);\n\n    const fetchAllOrders = useCallback(async () => {\n        setIsAllOrdersLoading(true);\n        try {\n            const { data, error } = await supabase.from('custom_orders').select('*');\n            if (error) {\n                console.error('Error fetching all orders:', error);\n            } else {\n                setAllOrders(data || []);\n            }\n        } catch (e) {\n            console.error(e);\n        } finally {\n            setIsAllOrdersLoading(false);\n        }\n    }, []);\n\n    const fetchDashboardData = useCallback(() => {\n        const totalOrders = allOrders.length;\n        const newOrders = allOrders.filter(o => o.status === 'nowe').length;\n        const completedOrders = allOrders.filter(o => o.status === 'zakończone').length;\n        const totalRevenue = allOrders\n            .filter(o => o.status === 'zakończone' && o.quote_price)\n            .reduce((sum, o) => sum + parseFloat(o.quote_price || 0), 0);\n\n        setDashboardStats({\n            totalOrders,\n            newOrders,\n            completedOrders,\n            totalRevenue,\n        });\n    }, [allOrders]);\n\n    const calculateFinancialStats = useCallback(() => {\n        const totalIncome = transactions\n            .filter(t => t.type === 'income')\n            .reduce((sum, t) => sum + (parseFloat(t.amount) || 0), 0);\n\n        const totalExpenses = transactions\n            .filter(t => t.type === 'expense')\n            .reduce((sum, t) => sum + (parseFloat(t.amount) || 0), 0);\n\n        const netProfit = totalIncome - totalExpenses;\n\n        setFinancialStats({\n            totalIncome,\n            totalExpenses,\n            netProfit,\n        });\n    }, [transactions]);\n\n    const fetchTransactions = useCallback(async () => {\n        try {\n            let query = supabase.from('transactions').select('*');\n\n            if (dateRange.startDate) query = query.gte('created_at', dateRange.startDate);\n            if (dateRange.endDate) query = query.lte('created_at', dateRange.endDate);\n            if (selectedCategory !== 'all') query = query.eq('category', selectedCategory);\n\n            const { data, error } = await query.order('created_at', { ascending: false });\n\n            if (error) {\n                console.error('Error fetching transactions:', error);\n            } else {\n                setTransactions(data || []);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }, [dateRange, selectedCategory]);\n\n    const fetchBudgets = useCallback(async () => {\n        if (!user) return;\n        try {\n            const { data, error } = await supabase\n                .from('budgets')\n                .select('*')\n                .eq('user_id', user.id);\n\n            if (error) {\n                console.error('Error fetching budgets:', error);\n            } else {\n                setBudgets(data || []);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }, [user]);\n\n    const fetchScheduledTransactions = useCallback(async () => {\n        if (!user) return;\n        try {\n            const { data, error } = await supabase\n                .from('scheduled_transactions')\n                .select('*')\n                .eq('user_id', user.id);\n\n            if (error) {\n                console.error('Error fetching scheduled transactions:', error);\n            } else {\n                setScheduledTransactions(data || []);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }, [user]);\n\n    // --- Transaction / budget handlers (kept full behavior) ---\n    const handleTransactionSubmit = async (e) => {\n        e.preventDefault();\n        const { type, description, amount, category } = newTransaction;\n\n        if (!description || !amount) {\n            alert('Opis i kwota są wymagane.');\n            return;\n        }\n\n        const { error } = await supabase.from('transactions').insert([\n            {\n                type,\n                description,\n                amount: parseFloat(amount),\n                category,\n            },\n        ]);\n\n        if (error) {\n            console.error('Error inserting transaction:', error);\n            alert('Nie udało się dodać transakcji.');\n        } else {\n            setNewTransaction({ type: 'expense', description: '', amount: '', category: '' });\n            fetchTransactions();\n        }\n    };\n\n    const handleDeleteTransaction = async (transactionId) => {\n        if (window.confirm('Czy na pewno chcesz usunąć tę transakcję?')) {\n            const { error } = await supabase\n                .from('transactions')\n                .delete()\n                .eq('id', transactionId);\n\n            if (error) {\n                console.error('Error deleting transaction:', error);\n                alert('Nie udało się usunąć transakcji.');\n            } else {\n                fetchTransactions();\n            }\n        }\n    };\n\n    const handleUpdateTransaction = async (e) => {\n        e.preventDefault();\n        if (!editingTransaction || !editingTransaction.id) {\n            alert('Błąd: Brak danych transakcji do edycji.');\n            console.error('Error: editingTransaction or editingTransaction.id is missing.');\n            return;\n        }\n\n        const { id, type, description, amount, category } = editingTransaction;\n\n        if (!description || !amount) {\n            alert('Opis i kwota są wymagane.');\n            return;\n        }\n\n        const parsedAmount = parseFloat(amount);\n        if (isNaN(parsedAmount)) {\n            alert('Kwota musi być liczbą.');\n            return;\n        }\n\n        const { error } = await supabase\n            .from('transactions')\n            .update({ type, description, amount: parsedAmount, category })\n            .eq('id', id);\n\n        if (error) {\n            console.error('Error updating transaction:', error);\n            alert('Nie udało się zaktualizować transakcji: ' + error.message);\n        } else {\n            setEditingTransaction(null);\n            fetchTransactions();\n        }\n    };\n\n    const handleAddBudget = async (e) => {\n        e.preventDefault();\n        if (!newBudget.category || !newBudget.limit) {\n            alert('Kategoria i limit są wymagane.');\n            return;\n        }\n        const { data, error } = await supabase\n            .from('budgets')\n            .insert(\n                {\n                    user_id: user.id,\n                    category: newBudget.category,\n                    limit: parseFloat(newBudget.limit),\n                },\n            );\n\n        if (error) {\n            console.error('Error adding budget:', error);\n            alert('Nie udało się dodać budżetu.');\n        } else {\n            setNewBudget({ category: '', limit: '' });\n            fetchBudgets();\n        }\n    };\n\n    const handleDeleteBudget = async (budgetId) => {\n        if (window.confirm('Czy na pewno chcesz usunąć ten budżet?')) {\n            const { error } = await supabase\n                .from('budgets')\n                .delete()\n                .eq('id', budgetId);\n\n            if (error) {\n                console.error('Error deleting budget:', error);\n                alert('Nie udało się usunąć budżetu.');\n            } else {\n                fetchBudgets();\n            }\n        }\n    };\n\n    const handleAddScheduledTransaction = async (e) => {\n        e.preventDefault();\n        if (!newScheduledTransaction.description || !newScheduledTransaction.amount || !newScheduledTransaction.nextDueDate) {\n            alert('Opis, kwota i następna data są wymagane.');\n            return;\n        }\n        const { data, error } = await supabase\n            .from('scheduled_transactions')\n            .insert(\n                {\n                    user_id: user.id,\n                    type: newScheduledTransaction.type,\n                    description: newScheduledTransaction.description,\n                    amount: parseFloat(newScheduledTransaction.amount),\n                    category: newScheduledTransaction.category,\n                    frequency: newScheduledTransaction.frequency,\n                    next_due_date: newScheduledTransaction.nextDueDate,\n                },\n            );\n\n        if (error) {\n            console.error('Error adding scheduled transaction:', error);\n            alert('Nie udało się dodać zaplanowanej transakcji.');\n        } else {\n            setNewScheduledTransaction({ type: 'expense', description: '', amount: '', category: '', frequency: 'monthly', nextDueDate: '' });\n            fetchScheduledTransactions();\n        }\n    };\n\n    const handleDeleteScheduledTransaction = async (scheduledTransactionId) => {\n        if (window.confirm('Czy na pewno chcesz usunąć tę zaplanowaną transakcję?')) {\n            const { error } = await supabase\n                .from('scheduled_transactions')\n                .delete()\n                .eq('id', scheduledTransactionId);\n\n            if (error) {\n                console.error('Error deleting scheduled transaction:', error);\n                alert('Nie udało się usunąć zaplanowanej transakcji.');\n            } else {\n                fetchScheduledTransactions();\n            }\n        }\n    };\n\n    // --- Product Filtering Logic (safer) ---\n    const filteredAndSortedProducts = useMemo(() => {\n        let filtered = products || [];\n\n        if (productSearchTerm) {\n            filtered = filtered.filter(p =>\n                (p.name || '').toLowerCase().includes(productSearchTerm.toLowerCase()) ||\n                (p.description || '').toLowerCase().includes(productSearchTerm.toLowerCase()) ||\n                (p.sku && p.sku.toString().includes(productSearchTerm))\n            );\n        }\n        if (productFilterCategory !== 'all') {\n            filtered = filtered.filter(p => p.category === productFilterCategory);\n        }\n        if (productFilterColor !== 'all') {\n            filtered = filtered.filter(p => (p.colorOptions || []).includes(productFilterColor));\n        }\n        if (productFilterPromo) {\n            filtered = filtered.filter(p => hasPromotion(p));\n        }\n        if (productFilterNew) {\n            filtered = filtered.filter(p => p.isNew);\n        }\n        if (productFilterBestseller) {\n            filtered = filtered.filter(p => p.isBestseller);\n        }\n\n        return filtered.sort((a, b) => {\n            const priceA = a.promoPrice ? getPriceValue(a.promoPrice) : getPriceValue(a.heightOptions?.[0]?.price);\n            const priceB = b.promoPrice ? getPriceValue(b.promoPrice) : getPriceValue(b.heightOptions?.[0]?.price);\n            switch (productSortOrder) {\n                case 'price-asc': return priceA - priceB;\n                case 'price-desc': return priceB - priceA;\n                case 'name-asc': return (a.name || '').localeCompare(b.name || '');\n                case 'name-desc': return (b.name || '').localeCompare(a.name || '');\n                default: return 0;\n            }\n        });\n    }, [products, productSearchTerm, productFilterCategory, productFilterColor, productFilterPromo, productFilterNew, productFilterBestseller, productSortOrder]);\n\n    const uniqueProductCategories = useMemo(() => {\n        const allCategories = (products || []).map(p => p.category).filter(Boolean);\n        return ['all', ...Array.from(new Set(allCategories))];\n    }, [products]);\n\n    const uniqueProductColors = useMemo(() => {\n        const allColors = (products || []).flatMap(p => p.colorOptions || []);\n        return ['all', ...Array.from(new Set(allColors))];\n    }, [products]);\n\n    // --- Effects for auth + data fetch orchestration ---\n    useEffect(() => {\n        if (!loading) {\n            if (!user) {\n                navigate('/admin-login');\n            } else if (!isAdmin) {\n                navigate('/');\n                alert('Brak dostępu. Tylko administratorzy mogą przeglądać ten panel.');\n            } else {\n                if (currentView === 'orders') {\n                    fetchOrders();\n                    fetchAllOrders();\n                } else if (currentView === 'stats') {\n                    fetchAllOrders();\n                } else if (currentView === 'finances') {\n                    fetchTransactions();\n                    fetchBudgets();\n                    fetchScheduledTransactions();\n                }\n            }\n        }\n    }, [user, isAdmin, loading, navigate, fetchOrders, fetchAllOrders, currentView, fetchTransactions, fetchBudgets, fetchScheduledTransactions]);\n\n    useEffect(() => {\n        if (allOrders.length > 0) {\n            fetchDashboardData();\n        }\n    }, [allOrders, fetchDashboardData]);\n\n    useEffect(() => {\n        if (transactions.length > 0) {\n            calculateFinancialStats();\n        }\n    }, [transactions, calculateFinancialStats]);\n\n    useEffect(() => {\n        if (selectedOrder) {\n            setModalQuotePrice(selectedOrder.quote_price || '');\n            setModalAdminComment(selectedOrder.admin_comment || '');\n\n            const fetchModalComments = async () => {\n                const { data, error } = await supabase\n                    .from('order_comments')\n                    .select('*')\n                    .eq('order_id', selectedOrder.order_id)\n                    .order('created_at', { ascending: true });\n\n                if (error) {\n                    console.error('Error fetching modal comments:', error);\n                    setModalComments([]);\n                } else {\n                    setModalComments(data || []);\n                }\n            };\n            fetchModalComments();\n        } else {\n            setModalComments([]);\n        }\n    }, [selectedOrder]);\n\n    // --- Order handlers ---\n    const handleStatusChange = async (orderId, newStatus) => {\n        const { error } = await supabase\n            .from('custom_orders')\n            .update({ status: newStatus })\n            .eq('order_id', orderId);\n\n        if (error) {\n            console.error('Error updating status:', error);\n            alert('Nie udało się zaktualizować statusu.');\n        } else {\n            fetchOrders();\n        }\n    };\n\n    const handleSaveOrderDetails = async () => {\n        if (!selectedOrder) return;\n        const parsedQuotePrice = parseFloat(modalQuotePrice);\n        const finalQuotePrice = isNaN(parsedQuotePrice) ? null : parsedQuotePrice;\n\n        const { error } = await supabase\n            .from('custom_orders')\n            .update({\n                quote_price: finalQuotePrice,\n                admin_comment: modalAdminComment\n            })\n            .eq('order_id', selectedOrder.order_id);\n\n        if (error) {\n            console.error('Error saving order details:', error);\n            alert('Nie udało się zapisać szczegółów zamówienia.');\n        } else {\n            setSelectedOrder(null);\n            fetchOrders();\n        }\n    };\n\n    const handleDeleteOrder = async (orderId) => {\n        if (window.confirm(`Czy na pewno chcesz usunąć zamówienie ${orderId}?`)) {\n            const { error } = await supabase\n                .from('custom_orders')\n                .delete()\n                .eq('order_id', orderId);\n\n            if (error) {\n                console.error('Error deleting order:', error);\n                alert('Nie udało się usunąć zamówienia.');\n            } else {\n                fetchOrders();\n            }\n        }\n    };\n\n    const handleSubmitAdminComment = async (e) => {\n        e.preventDefault();\n        if (!newAdminComment.trim() || !selectedOrder) return;\n\n        const { data, error } = await supabase\n            .from('order_comments')\n            .insert([\n                {\n                    order_id: selectedOrder.order_id,\n                    comment_text: newAdminComment,\n                    is_admin_comment: true\n                }\n            ]);\n\n        if (error) {\n            console.error('Error submitting admin comment:', error);\n            alert('Nie udało się wysłać komentarza administratora.');\n        } else {\n            setNewAdminComment('');\n            const { data: updatedComments, error: commentsError } = await supabase\n                .from('order_comments')\n                .select('*')\n                .eq('order_id', selectedOrder.order_id)\n                .order('created_at', { ascending: true });\n\n            if (commentsError) {\n                console.error('Error re-fetching comments after submission:', commentsError);\n            } else {\n                setModalComments(updatedComments || []);\n            }\n        }\n    };\n\n    const handleLogout = async () => {\n        await signOut();\n        navigate('/');\n    };\n\n    if (loading || (!user && !loading) || (!isAdmin && !loading)) {\n        return <div className=\"container mt-5 pt-5 text-center\"><p>Ładowanie panelu...</p></div>;\n    }\n\n    return (\n        <div className=\"container-fluid mt-5 pt-5\">\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\n                <h2>Panel Administratora</h2>\n                <button onClick={handleLogout} className=\"btn btn-outline-danger\">Wyloguj</button>\n            </div>\n\n            <ul className=\"nav nav-tabs mb-4\">\n                <li className=\"nav-item\">\n                    <button\n                        className={`nav-link ${currentView === 'orders' ? 'active' : ''}`}\n                        onClick={() => setCurrentView('orders')}\n                    >\n                        Zarządzaj Zamówieniami\n                    </button>\n                </li>\n                <li className=\"nav-item\">\n                    <button\n                        className={`nav-link ${currentView === 'products' ? 'active' : ''}`}\n                        onClick={() => setCurrentView('products')}\n                    >\n                        Przeglądaj Produkty\n                    </button>\n                </li>\n                <li className=\"nav-item\">\n                    <button\n                        className={`nav-link ${currentView === 'stats' ? 'active' : ''}`}\n                        onClick={() => setCurrentView('stats')}\n                    >\n                        Statystyki\n                    </button>\n                </li>\n                <li className=\"nav-item\">\n                    <button\n                        className={`nav-link ${currentView === 'finances' ? 'active' : ''}`}\n                        onClick={() => setCurrentView('finances')}\n                    >\n                        Finanse\n                    </button>\n                </li>\n            </ul>\n\n            {(() => {\n                switch (currentView) {\n                    case 'orders':\n                        return (\n                            <>\n                                <div className=\"row mb-4\">\n                                    <div className=\"col-md-6\">\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            placeholder=\"Szukaj po ID, nazwie klienta, emailu...\"\n                                            value={orderSearchTerm}\n                                            onChange={(e) => setOrderSearchTerm(e.target.value)}\n                                        />\n                                    </div>\n                                    <div className=\"col-md-3\">\n                                        <select\n                                            className=\"form-select\"\n                                            value={orderFilterStatus}\n                                            onChange={(e) => setOrderFilterStatus(e.target.value)}\n                                        >\n                                            {orderStatuses.map(s => <option key={s} value={s}>{s === 'all' ? 'Wszystkie statusy' : s}</option>)}\n                                        </select>\n                                    </div>\n                                    <div className=\"col-md-3\">\n                                        <button className=\"btn btn-outline-primary w-100\" onClick={fetchOrders}>Odśwież</button>\n                                    </div>\n                                </div>\n\n                                {orderFetchStatus === 'loading' && <p>Ładowanie zamówień...</p>}\n                                {orderFetchStatus === 'error' && <div className=\"alert alert-danger\">Nie udało się załadować zamówień.</div>}\n\n                                {orderFetchStatus === 'success' && orders.length === 0 && <p>Brak zamówień niestandardowych.</p>}\n\n                                {orderFetchStatus === 'success' && orders.length > 0 && (\n                                    <div className=\"table-responsive\">\n                                        <table className=\"table table-striped table-hover\">\n                                            <thead>\n                                                <tr>\n                                                    <th>ID Zamówienia</th>\n                                                    <th>Klient</th>\n                                                    <th>Email</th>\n                                                    <th>Status</th>\n                                                    <th>Złożono</th>\n                                                    <th>Akcje</th>\n                                                </tr>\n                                            </thead>\n                                            <tbody>\n                                                {orders.map(order => (\n                                                    <tr key={order.order_id}>\n                                                        <td>{order.order_id}</td>\n                                                        <td>{order.customer_name}</td>\n                                                        <td>{order.customer_email}</td>\n                                                        <td>\n                                                            <select\n                                                                className=\"form-select form-select-sm\"\n                                                                value={order.status}\n                                                                onChange={(e) => handleStatusChange(order.order_id, e.target.value)}\n                                                            >\n                                                                {orderStatuses.filter(s => s !== 'all').map(s => <option key={s} value={s}>{s}</option>)}\n                                                            </select>\n                                                        </td>\n                                                        <td>{new Date(order.created_at).toLocaleString()}</td>\n                                                        <td>\n                                                            <button\n                                                                className=\"btn btn-info btn-sm me-2\"\n                                                                onClick={() => setSelectedOrder(order)}\n                                                            >\n                                                                Szczegóły\n                                                            </button>\n                                                            <button\n                                                                className=\"btn btn-danger btn-sm\"\n                                                                onClick={() => handleDeleteOrder(order.order_id)}\n                                                            >\n                                                                Usuń\n                                                            </button>\n                                                        </td>\n                                                    </tr>\n                                                ))}\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                )}\n\n                                {orderFetchStatus === 'success' && orderTotalPages > 1 && (\n                                    <nav>\n                                        <ul className=\"pagination justify-content-center\">\n                                            <li className={`page-item ${orderCurrentPage === 1 ? 'disabled' : ''}`}>\n                                                <button className=\"page-link\" onClick={() => setOrderCurrentPage(orderCurrentPage - 1)}>Poprzednia</button>\n                                            </li>\n                                            {[...Array(orderTotalPages)].map((_, index) => (\n                                                <li key={index} className={`page-item ${orderCurrentPage === index + 1 ? 'active' : ''}`}>\n                                                    <button className=\"page-link\" onClick={() => setOrderCurrentPage(index + 1)}>{index + 1}</button>\n                                                </li>\n                                            ))}\n                                            <li className={`page-item ${orderCurrentPage === orderTotalPages ? 'disabled' : ''}`}>\n                                                <button className=\"page-link\" onClick={() => setOrderCurrentPage(orderCurrentPage + 1)}>Następna</button>\n                                            </li>\n                                        </ul>\n                                    </nav>\n                                )}\n\n                                {selectedOrder && (\n                                    <>\n                                        <div className=\"modal fade show\" style={{ display: 'block' }} tabIndex=\"-1\">\n                                            <div className=\"modal-dialog modal-lg modal-dialog-centered\">\n                                                <div className=\"modal-content\">\n                                                    <div className=\"modal-header\">\n                                                        <h5 className=\"modal-title\">Szczegóły Zamówienia: {selectedOrder.order_id}</h5>\n                                                        <button type=\"button\" className=\"btn-close\" onClick={() => setSelectedOrder(null)}></button>\n                                                    </div>\n                                                    <div className=\"modal-body\">\n                                                        <p><strong>Klient:</strong> {selectedOrder.customer_name}</p>\n                                                        <p><strong>Email:</strong> {selectedOrder.customer_email}</p>\n                                                        <p><strong>Status:</strong> {selectedOrder.status}</p>\n                                                        <p><strong>Opis:</strong> {selectedOrder.description}</p>\n                                                        {selectedOrder.sku && <p><strong>SKU:</strong> {selectedOrder.sku}</p>}\n                                                        <p><strong>Wymiary:</strong> {selectedOrder.dimensions || '-'}</p>\n                                                        <p><strong>Kolor:</strong> <span style={{ backgroundColor: selectedOrder.color_hex, padding: '2px 8px', borderRadius: '3px', border: '1px solid #ccc' }}>{selectedOrder.color_hex}</span></p>\n                                                        <p><strong>Przeznaczenie:</strong> {selectedOrder.purpose || '-'}</p>\n                                                        <p><strong>Materiał:</strong> {selectedOrder.material || '-'}</p>\n                                                        <p><strong>Precyzja:</strong> {selectedOrder.precision || '-'}</p>\n                                                        <p><strong>Ilość:</strong> {selectedOrder.quantity || '-'}</p>\n                                                        {selectedOrder.file_url && <p><strong>Plik:</strong> <a href={selectedOrder.file_url} target=\"_blank\" rel=\"noopener noreferrer\">Pobierz plik</a></p>}\n                                                        <p><strong>Złożono:</strong> {new Date(selectedOrder.created_at).toLocaleString()}</p>\n\n                                                        <hr className=\"my-3\" />\n                                                        <h6>Edycja Administratora:</h6>\n                                                        <div className=\"mb-3\">\n                                                            <label htmlFor=\"quotePrice\" className=\"form-label\">Wycena (zł)</label>\n                                                            <input\n                                                                type=\"text\"\n                                                                className=\"form-control\"\n                                                                id=\"quotePrice\"\n                                                                value={modalQuotePrice}\n                                                                onChange={(e) => setModalQuotePrice(e.target.value)}\n                                                            />\n                                                        </div>\n                                                        <div className=\"mb-3\">\n                                                            <label htmlFor=\"adminComment\" className=\"form-label\">Komentarz Administratora</label>\n                                                            <textarea\n                                                                className=\"form-control\"\n                                                                id=\"adminComment\"\n                                                                rows=\"3\"\n                                                                value={modalAdminComment}\n                                                                onChange={(e) => setModalAdminComment(e.target.value)}\n                                                            ></textarea>\n                                                        </div>\n\n                                                        {modalComments.length > 0 && (\n                                                            <div className=\"mt-4\">\n                                                                <h6>Historia Komentarzy:</h6>\n                                                                <div className=\"list-group\">\n                                                                    {modalComments.map((comment) => (\n                                                                        <div key={comment.id} className=\"list-group-item list-group-item-action flex-column align-items-start\">\n                                                                            <div className=\"d-flex w-100 justify-content-between\">\n                                                                                <h6 className=\"mb-1\">{comment.is_admin_comment ? 'Administrator' : 'Klient'}</h6>\n                                                                                <small className=\"text-muted\">{new Date(comment.created_at).toLocaleString()}</small>\n                                                                            </div>\n                                                                            <p className=\"mb-1\">{comment.comment_text}</p>\n                                                                        </div>\n                                                                    ))}\n                                                                </div>\n                                                            </div>\n                                                        )}\n\n                                                        <div className=\"mt-4\">\n                                                            <h6>Dodaj Komentarz Administratora:</h6>\n                                                            <form onSubmit={handleSubmitAdminComment}>\n                                                                <div className=\"mb-3\">\n                                                                    <textarea\n                                                                        className=\"form-control\"\n                                                                        rows=\"3\"\n                                                                        placeholder=\"Wpisz swój komentarz...\"\n                                                                        value={newAdminComment}\n                                                                        onChange={(e) => setNewAdminComment(e.target.value)}\n                                                                        required\n                                                                    ></textarea>\n                                                                </div>\n                                                                <button type=\"submit\" className=\"btn btn-primary\" disabled={!newAdminComment.trim()}>\n                                                                    Wyślij Komentarz\n                                                                </button>\n                                                            </form>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"modal-footer\">\n                                                        <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setSelectedOrder(null)}>Zamknij</button>\n                                                        <button type=\"button\" className=\"btn btn-primary\" onClick={handleSaveOrderDetails}>Zapisz zmiany</button>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div className=\"modal-backdrop fade show\" onClick={() => setSelectedOrder(null)}></div>\n                                    </>\n                                )}\n                            </>\n                        );\n                    case 'products':\n                        return (\n                            <>\n                                <div className=\"row mb-4\">\n                                    <div className=\"col-md-4\">\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            placeholder=\"Szukaj produktu...\"\n                                            value={productSearchTerm}\n                                            onChange={(e) => setProductSearchTerm(e.target.value)}\n                                        />\n                                    </div>\n                                    <div className=\"col-md-2\">\n                                        <select\n                                            className=\"form-select\"\n                                            value={productFilterCategory}\n                                            onChange={(e) => setProductFilterCategory(e.target.value)}\n                                        >\n                                            {uniqueProductCategories.map(cat => <option key={cat} value={cat}>{cat === 'all' ? 'Wszystkie kategorie' : cat}</option>)}\n                                        </select>\n                                    </div>\n                                    <div className=\"col-md-2\">\n                                        <select\n                                            className=\"form-select\"\n                                            value={productFilterColor}\n                                            onChange={(e) => setProductFilterColor(e.target.value)}\n                                        >\n                                            {uniqueProductColors.map(col => <option key={col} value={col}>{col === 'all' ? 'Wszystkie kolory' : col}</option>)}\n                                        </select>\n                                    </div>\n                                    <div className=\"col-md-4 d-flex align-items-center\">\n                                        <div className=\"form-check me-3\">\n                                            <input className=\"form-check-input\" type=\"checkbox\" id=\"productFilterPromo\" checked={productFilterPromo} onChange={(e) => setProductFilterPromo(e.target.checked)} />\n                                            <label className=\"form-check-label\" htmlFor=\"productFilterPromo\">Promocje</label>\n                                        </div>\n                                        <div className=\"form-check me-3\">\n                                            <input className=\"form-check-input\" type=\"checkbox\" id=\"productFilterNew\" checked={productFilterNew} onChange={(e) => setProductFilterNew(e.target.checked)} />\n                                            <label className=\"form-check-label\" htmlFor=\"productFilterNew\">Nowości</label>\n                                        </div>\n                                        <div className=\"form-check\">\n                                            <input className=\"form-check-input\" type=\"checkbox\" id=\"productFilterBestseller\" checked={productFilterBestseller} onChange={(e) => setProductFilterBestseller(e.target.checked)} />\n                                            <label className=\"form-check-label\" htmlFor=\"productFilterBestseller\">Bestsellery</label>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"row mb-4\">\n                                    <div className=\"col-md-3\">\n                                        <select\n                                            className=\"form-select\"\n                                            value={productSortOrder}\n                                            onChange={(e) => setProductSortOrder(e.target.value)}\n                                        >\n                                            <option value=\"default\">Sortuj produkty</option>\n                                            <option value=\"name-asc\">Nazwa (A-Z)</option>\n                                            <option value=\"name-desc\">Nazwa (Z-A)</option>\n                                            <option value=\"price-asc\">Cena (rosnąco)</option>\n                                            <option value=\"price-desc\">Cena (malejąco)</option>\n                                        </select>\n                                    </div>\n                                    <div className=\"col-md-9 text-end\">\n                                        <button className=\"btn btn-outline-secondary\" onClick={() => {\n                                            setProductSearchTerm('');\n                                            setProductFilterCategory('all');\n                                            setProductFilterColor('all');\n                                            setProductFilterPromo(false);\n                                            setProductFilterNew(false);\n                                            setProductFilterBestseller(false);\n                                            setProductSortOrder('default');\n                                        }}>Wyczyść filtry produktów</button>\n                                    </div>\n                                </div>\n\n                                <div className=\"table-responsive\">\n                                    <table className=\"table table-striped table-hover\">\n                                        <thead>\n                                            <tr>\n                                                <th>ID</th>\n                                                <th>SKU</th>\n                                                <th>Nazwa</th>\n                                                <th>Kategoria</th>\n                                                <th>Kolory</th>\n                                                <th>Opcje Wysokości/Ceny</th>\n                                                <th>Cena Promocyjna</th>\n                                                <th>Nowość</th>\n                                                <th>Bestseller</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            {filteredAndSortedProducts.map(product => (\n                                                <tr key={product.id}>\n                                                    <td>{product.id}</td>\n                                                    <td>{product.sku}</td>\n                                                    <td>{product.name}</td>\n                                                    <td>{product.category}</td>\n                                                    <td>{(product.colorOptions || []).join(', ')}</td>\n                                                    <td>\n                                                        {(product.heightOptions || []).map(opt =>\n                                                            <div key={opt.label}>{opt.label}: {opt.price}</div>\n                                                        )}\n                                                    </td>\n                                                    <td>{product.heightOptions && product.heightOptions.some(o => o.promoPrice) ? 'Tak' : '-'}</td>\n                                                    <td>{product.isNew ? 'Tak' : 'Nie'}</td>\n                                                    <td>{product.isBestseller ? 'Tak' : 'Nie'}</td>\n                                                </tr>\n                                            ))}\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </>\n                        );\n                    case 'stats':\n                        return (\n                            <>\n                                <div className=\"d-flex justify-content-end mb-3\">\n                                    <button className=\"btn btn-outline-primary\" onClick={fetchAllOrders}>Odśwież</button>\n                                </div>\n                                <DashboardStats stats={dashboardStats} />\n                                <DashboardCharts orders={allOrders} />\n                            </>\n                        );\n                    case 'finances':\n                        return <FinanceDashboard user={user} />;\n                    default:\n                        return null;\n                }\n            })()}\n        </div>\n    );\n};\n\nexport default AdminDashboardPage;\n"],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","ArcElement","PointElement","LineElement","Title","Tooltip","Legend","FinancialStats","_ref8","stats","_jsxs","className","children","_jsx","totalIncome","toFixed","totalExpenses","netProfit","FinancialGoalTracker","_ref9","goal","current","percentage","Math","round","CircularProgressbar","value","text","concat","styles","buildStyles","textColor","pathColor","trailColor","FinancialCharts","_ref0","transactions","expenseByCategory","filter","t","type","reduce","acc","category","amount","expensePieChartData","labels","Object","keys","datasets","data","values","backgroundColor","transactionsByMonth","month","Date","created_at","toLocaleString","year","income","expense","lineChartData","label","map","m","borderColor","fill","Doughnut","Line","_ref","user","setTransactions","useState","newTransaction","setNewTransaction","description","financialStats","setFinancialStats","financialGoal","setFinancialGoal","budgets","setBudgets","newBudget","setNewBudget","limit","scheduledTransactions","setScheduledTransactions","newScheduledTransaction","setNewScheduledTransaction","frequency","nextDueDate","isTransactionsLoading","setIsTransactionsLoading","dateRange","setDateRange","startDate","endDate","selectedCategory","setSelectedCategory","editingTransaction","setEditingTransaction","uniqueTransactionCategories","useMemo","allCategories","Boolean","Array","from","Set","fetchTransactions","useCallback","async","query","supabase","select","gte","lte","eq","error","order","ascending","console","fetchBudgets","id","fetchScheduledTransactions","calculateFinancialStats","sum","useEffect","length","_Fragment","onClick","htmlFor","onChange","e","_objectSpread","target","cat","onSubmit","preventDefault","alert","insert","parseFloat","placeholder","transaction","window","confirm","delete","transactionId","handleDeleteTransaction","style","display","tabIndex","update","user_id","required","budget","index","spent","remaining","role","width","min","budgetId","handleDeleteBudget","next_due_date","st","scheduledTransactionId","handleDeleteScheduledTransaction","entries","sort","_ref2","_ref3","a","b","slice","_ref4","_ref5","_ref6","_ref7","getPriceValue","priceString","undefined","price","String","replace","isNaN","DashboardCharts","orders","orderStatusCounts","status","chartData","Bar","options","responsive","plugins","legend","position","title","DashboardStats","totalOrders","newOrders","completedOrders","totalRevenue","AdminDashboardPage","isAdmin","loading","signOut","useAuth","navigate","useNavigate","products","setProducts","productsLoading","setProductsLoading","productsError","setProductsError","fetchProducts","url","process","response","fetch","ok","Error","json","isArray","setOrders","orderFetchStatus","setOrderFetchStatus","orderSearchTerm","setOrderSearchTerm","orderFilterStatus","setOrderFilterStatus","orderCurrentPage","setOrderCurrentPage","orderTotalPages","setOrderTotalPages","orderStatuses","selectedOrder","setSelectedOrder","modalQuotePrice","setModalQuotePrice","modalAdminComment","setModalAdminComment","modalComments","setModalComments","newAdminComment","setNewAdminComment","allOrders","setAllOrders","dashboardStats","setDashboardStats","productSearchTerm","setProductSearchTerm","productFilterCategory","setProductFilterCategory","productFilterColor","setProductFilterColor","productFilterPromo","setProductFilterPromo","productFilterNew","setProductFilterNew","productFilterBestseller","setProductFilterBestseller","productSortOrder","setProductSortOrder","isOrdersLoading","setIsOrdersLoading","isAllOrdersLoading","setIsAllOrdersLoading","currentView","setCurrentView","fetchOrders","count","q","or","to","range","ceil","fetchAllOrders","fetchDashboardData","o","quote_price","filteredAndSortedProducts","filtered","p","name","toLowerCase","includes","sku","toString","colorOptions","hasPromotion","product","heightOptions","some","opt","promoPrice","promo_price","isNew","isBestseller","_a$heightOptions","_a$heightOptions$","_b$heightOptions","_b$heightOptions$","priceA","priceB","localeCompare","uniqueProductCategories","uniqueProductColors","allColors","flatMap","admin_comment","order_id","fetchModalComments","handleSaveOrderDetails","parsedQuotePrice","finalQuotePrice","handleSubmitAdminComment","trim","comment_text","is_admin_comment","updatedComments","commentsError","s","customer_name","customer_email","orderId","newStatus","handleStatusChange","handleDeleteOrder","_","dimensions","color_hex","padding","borderRadius","border","purpose","material","precision","quantity","file_url","href","rel","rows","comment","disabled","col","checked","join","FinanceDashboard"],"sourceRoot":""}